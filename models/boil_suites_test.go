// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Departments", testDepartments)
	t.Run("Issues", testIssues)
	t.Run("Projects", testProjects)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Departments", testDepartmentsDelete)
	t.Run("Issues", testIssuesDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Departments", testDepartmentsQueryDeleteAll)
	t.Run("Issues", testIssuesQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Departments", testDepartmentsSliceDeleteAll)
	t.Run("Issues", testIssuesSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Departments", testDepartmentsExists)
	t.Run("Issues", testIssuesExists)
	t.Run("Projects", testProjectsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Departments", testDepartmentsFind)
	t.Run("Issues", testIssuesFind)
	t.Run("Projects", testProjectsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Departments", testDepartmentsBind)
	t.Run("Issues", testIssuesBind)
	t.Run("Projects", testProjectsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Departments", testDepartmentsOne)
	t.Run("Issues", testIssuesOne)
	t.Run("Projects", testProjectsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Departments", testDepartmentsAll)
	t.Run("Issues", testIssuesAll)
	t.Run("Projects", testProjectsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Departments", testDepartmentsCount)
	t.Run("Issues", testIssuesCount)
	t.Run("Projects", testProjectsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Departments", testDepartmentsHooks)
	t.Run("Issues", testIssuesHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Departments", testDepartmentsInsert)
	t.Run("Departments", testDepartmentsInsertWhitelist)
	t.Run("Issues", testIssuesInsert)
	t.Run("Issues", testIssuesInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DepartmentToUserUsingLead", testDepartmentToOneUserUsingLead)
	t.Run("IssueToUserUsingPerformer", testIssueToOneUserUsingPerformer)
	t.Run("IssueToUserUsingCreator", testIssueToOneUserUsingCreator)
	t.Run("IssueToProjectUsingProject", testIssueToOneProjectUsingProject)
	t.Run("ProjectToUserUsingLead", testProjectToOneUserUsingLead)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DepartmentToUsers", testDepartmentToManyUsers)
	t.Run("IssueToUsers", testIssueToManyUsers)
	t.Run("ProjectToIssues", testProjectToManyIssues)
	t.Run("ProjectToUsers", testProjectToManyUsers)
	t.Run("UserToDepartments", testUserToManyDepartments)
	t.Run("UserToLeadDepartments", testUserToManyLeadDepartments)
	t.Run("UserToIssues", testUserToManyIssues)
	t.Run("UserToPerformerIssues", testUserToManyPerformerIssues)
	t.Run("UserToCreatorIssues", testUserToManyCreatorIssues)
	t.Run("UserToProjects", testUserToManyProjects)
	t.Run("UserToLeadProjects", testUserToManyLeadProjects)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DepartmentToUserUsingLeadDepartments", testDepartmentToOneSetOpUserUsingLead)
	t.Run("IssueToUserUsingPerformerIssues", testIssueToOneSetOpUserUsingPerformer)
	t.Run("IssueToUserUsingCreatorIssues", testIssueToOneSetOpUserUsingCreator)
	t.Run("IssueToProjectUsingIssues", testIssueToOneSetOpProjectUsingProject)
	t.Run("ProjectToUserUsingLeadProjects", testProjectToOneSetOpUserUsingLead)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("DepartmentToUserUsingLeadDepartments", testDepartmentToOneRemoveOpUserUsingLead)
	t.Run("IssueToUserUsingPerformerIssues", testIssueToOneRemoveOpUserUsingPerformer)
	t.Run("IssueToUserUsingCreatorIssues", testIssueToOneRemoveOpUserUsingCreator)
	t.Run("IssueToProjectUsingIssues", testIssueToOneRemoveOpProjectUsingProject)
	t.Run("ProjectToUserUsingLeadProjects", testProjectToOneRemoveOpUserUsingLead)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DepartmentToUsers", testDepartmentToManyAddOpUsers)
	t.Run("IssueToUsers", testIssueToManyAddOpUsers)
	t.Run("ProjectToIssues", testProjectToManyAddOpIssues)
	t.Run("ProjectToUsers", testProjectToManyAddOpUsers)
	t.Run("UserToDepartments", testUserToManyAddOpDepartments)
	t.Run("UserToLeadDepartments", testUserToManyAddOpLeadDepartments)
	t.Run("UserToIssues", testUserToManyAddOpIssues)
	t.Run("UserToPerformerIssues", testUserToManyAddOpPerformerIssues)
	t.Run("UserToCreatorIssues", testUserToManyAddOpCreatorIssues)
	t.Run("UserToProjects", testUserToManyAddOpProjects)
	t.Run("UserToLeadProjects", testUserToManyAddOpLeadProjects)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DepartmentToUsers", testDepartmentToManySetOpUsers)
	t.Run("IssueToUsers", testIssueToManySetOpUsers)
	t.Run("ProjectToIssues", testProjectToManySetOpIssues)
	t.Run("ProjectToUsers", testProjectToManySetOpUsers)
	t.Run("UserToDepartments", testUserToManySetOpDepartments)
	t.Run("UserToLeadDepartments", testUserToManySetOpLeadDepartments)
	t.Run("UserToIssues", testUserToManySetOpIssues)
	t.Run("UserToPerformerIssues", testUserToManySetOpPerformerIssues)
	t.Run("UserToCreatorIssues", testUserToManySetOpCreatorIssues)
	t.Run("UserToProjects", testUserToManySetOpProjects)
	t.Run("UserToLeadProjects", testUserToManySetOpLeadProjects)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DepartmentToUsers", testDepartmentToManyRemoveOpUsers)
	t.Run("IssueToUsers", testIssueToManyRemoveOpUsers)
	t.Run("ProjectToIssues", testProjectToManyRemoveOpIssues)
	t.Run("ProjectToUsers", testProjectToManyRemoveOpUsers)
	t.Run("UserToDepartments", testUserToManyRemoveOpDepartments)
	t.Run("UserToLeadDepartments", testUserToManyRemoveOpLeadDepartments)
	t.Run("UserToIssues", testUserToManyRemoveOpIssues)
	t.Run("UserToPerformerIssues", testUserToManyRemoveOpPerformerIssues)
	t.Run("UserToCreatorIssues", testUserToManyRemoveOpCreatorIssues)
	t.Run("UserToProjects", testUserToManyRemoveOpProjects)
	t.Run("UserToLeadProjects", testUserToManyRemoveOpLeadProjects)
}

func TestReload(t *testing.T) {
	t.Run("Departments", testDepartmentsReload)
	t.Run("Issues", testIssuesReload)
	t.Run("Projects", testProjectsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Departments", testDepartmentsReloadAll)
	t.Run("Issues", testIssuesReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Departments", testDepartmentsSelect)
	t.Run("Issues", testIssuesSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Departments", testDepartmentsUpdate)
	t.Run("Issues", testIssuesUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Departments", testDepartmentsSliceUpdateAll)
	t.Run("Issues", testIssuesSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
